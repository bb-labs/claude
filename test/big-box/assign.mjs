import bb from '../../big-box'
import jest from '..'

export default jest.suite(function () {

    console.log('\n\n-------- Assignment Suite --------\n\n')

    const A = bb.tensor([
        [[10, 2]],
        [[40, 3]],
        [[50, 1]],
    ])

    const K = bb.tensor([
        [[5, 3], [4, 2], [4, 8], [9, 7]],
        [[4, 7], [9, 2], [4, 4], [4, 8]],
        [[3, 1], [4, 3], [5, 1], [7, 7]],
        [[4, 5], [7, 3], [3, 5], [7, 3]]
    ])

    const D = bb.tensor([[0], [1], [2], [3]])

    const J = bb.tensor([[1, 2], [3, 4]])
    const L = bb.tensor([[[4, 7], [9, 8]], [[0, 3], [7, 4]]])
    const M = bb.linspace(0, 2 * Math.PI, 4)
    const N = bb.linspace(0, 2 * Math.PI, 10)
    const Q = bb.tensor([[0, 1]])
    const T = bb.tensor([
        [[2], [6]],
        [[1], [6]],
        [[5], [2]],
        [[1], [2]],
        [[1], [5]]
    ])
    let O
    

    this.expect(O = N.insert({ with: [1], entries: [2], axes: [1] })).toEqual([])
    this.expect(T.astype(bb.ComplexFloat32)).toEqual([["2.0+0.0i", "6.0+0.0i"], ["1.0+0.0i", "6.0+0.0i"], ["5.0+0.0i", "2.0+0.0i"], ["1.0+0.0i", "2.0+0.0i"], ["1.0+0.0i", "5.0+0.0i"]])
    this.expect(T.astype(bb.ComplexFloat32).astype(bb.Float32)).toEqual([["2.0+0.0i", "6.0+0.0i"], ["1.0+0.0i", "6.0+0.0i"], ["5.0+0.0i", "2.0+0.0i"], ["1.0+0.0i", "2.0+0.0i"], ["1.0+0.0i", "5.0+0.0i"]])
    this.expect(M.multiply({ with: bb.tensor([0, 1], bb.ComplexFloat32) }).exp().reshape([4, 1]).view(bb.Float32)).toEqual([["1", "0"], ["-0.5000000596046448", "0.8660253882408142"], ["-0.49999991059303284", "-0.866025447845459"], ["1", "1.7484555314695172e-7"]])
    this.expect(N.multiply({ with: bb.tensor([0, 1], bb.ComplexFloat32) }).exp().reshape([10, 1]).view(bb.Float32)).toEqual([["1", "0"], ["0.7660444378852844", "0.6427875757217407"], ["0.17364822328090668", "0.9848077297210693"], ["-0.5000000596046448", "0.8660253882408142"], ["-0.9396926164627075", "0.3420202136039734"], ["-0.9396926164627075", "-0.3420201539993286"], ["-0.49999991059303284", "-0.866025447845459"], ["0.1736481487751007", "-0.9848077297210693"], ["0.7660443186759949", "-0.642787754535675"], ["1", "1.7484555314695172e-7"]])
    this.expect(Q.insert({ with: 0, entries: [1], axes: [0] })).toEqual([[0, 1], [0, 0]])
    this.expect(N.insert({ with: 1, entries: [2], axes: [1] })).toEqual([[1, 0, 1], [0.7660444378852844, 0.6427875757217407, 1], [0.17364822328090668, 0.9848077297210693, 1], [-0.5000000596046448, 0.8660253882408142, 1], [-0.9396926164627075, 0.3420202136039734, 1], [-0.9396926164627075, -0.3420201539993286, 1], [-0.49999991059303284, -0.866025447845459, 1], [0.1736481487751007, -0.9848077297210693, 1], [0.7660443186759949, -0.642787754535675, 1], [1, 1.7484555314695172e-7, 1]])
    this.expect(O.insert({ with: [0, 0, 1], entries: [0, 2, 4, 6, 8, 10], axes: [0] })).toEqual([[0, 0, 1], [1, 0, 1], [0.7660444378852844, 0.6427875757217407, 1], [0, 0, 1], [0.17364822328090668, 0.9848077297210693, 1], [-0.5000000596046448, 0.8660253882408142, 1], [0, 0, 1], [-0.9396926164627075, 0.3420202136039734, 1], [-0.9396926164627075, -0.3420201539993286, 1], [0, 0, 1], [-0.49999991059303284, -0.866025447845459, 1], [0.1736481487751007, -0.9848077297210693, 1], [0, 0, 1], [0.7660443186759949, -0.642787754535675, 1], [1, 1.7484555314695172e-7, 1], [0, 0, 1]])
    this.expect(M.insert({ with: 1, entries: [2], axes: [1] })).toEqual([[1, 0, 1], [-0.5000000596046448, 0.8660253882408142, 1], [-0.49999991059303284, -0.866025447845459, 1], [1, 1.7484555314695172e-7, 1]])
    this.expect(L.insert({ entries: [0, 1], with: 10, axes: [0] })).toEqual([[[10, 10], [10, 10]], [[4, 7], [9, 8]], [[10, 10], [10, 10]], [[0, 3], [7, 4]]])
    this.expect(J.insert({ entries: [0, 2], with: [5, 5], axes: [0] })).toEqual([[5, 5], [1, 2], [3, 4], [5, 5]])
    this.expect(J.insert({ entries: [0], with: [5, 5], axes: [0] })).toEqual([[5, 5], [1, 2], [3, 4]])
    this.expect(bb.arange({ stop: 10 }).add({ with: bb.arange({ stop: 10 }).reshape([10, 1]) })).toEqual([[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [4, 5, 6, 7, 8, 9, 10, 11, 12, 13], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16], [8, 9, 10, 11, 12, 13, 14, 15, 16, 17], [9, 10, 11, 12, 13, 14, 15, 16, 17, 18]])
    this.expect(new bb.cached.multiply({ of: bb.linspace(0, 2 * Math.PI, 2), with: i }).invoke()).toEqual([0, 6.2831854820251465])
    this.expect(new bb.cached.repeat({ of: J, count: 2, axes: [0] }).invoke()).toEqual([[1, 2], [1, 2], [3, 4], [3, 4]])
    this.expect(new bb.cached.assign({ of: bb.zeros([1, 3]), region: [':', ':2'], with: 255 }).invoke()).toEqual([[255, 255, 0]])
    this.expect(new bb.cached.assign({ of: bb.zeros([1, 3]), region: [':', '1'], with: 255 }).invoke()).toEqual([[0, 255, 0]])
    this.expect(new bb.cached.negate({ of: bb.ones([2, 2]) }).invoke()).toEqual([[-1, -1], [-1, -1]])
    this.expect(new bb.cached.assign({ of: bb.zeros([3, 3]), region: [':', 1], with: 1 }).invoke()).toEqual([[0, 1, 0], [0, 1, 0], [0, 1, 0]])
    this.expect(new bb.cached.exp({ of: `${Math.PI}i` }).invoke()).toEqual([-1, -8.742277657347586e-8])
    this.expect(new bb.cached.multiply({ of: A, with: 10 }).invoke()).toEqual([[100, 20], [400, 30], [500, 10]])
    this.expect(new bb.cached.multiply({ of: K, with: D }).invoke()).toEqual([[0, 0], [4, 2], [8, 16], [27, 21]], [[0, 0], [9, 2], [8, 8], [12, 24]], [[0, 0], [4, 3], [10, 2], [21, 21]], [[0, 0], [7, 3], [6, 10], [21, 9]])
    this.expect(new bb.cached.repeat({ of: [[1], [2], [3]], count: 3, axes: [1] }).invoke()).toEqual([[1, 1, 1], [2, 2, 2], [3, 3, 3]])


    console.log('\n\n--------End Mismatch Suite--------\n\n')
})
