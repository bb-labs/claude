import bb from '..'
import jest from '../../test'

export default jest.suite(function () {

    console.log('\n\n-------- Complex Suite --------\n\n')

    const A = bb.tensor({
        data: [
            ['10 + 2i'],
            ['40 + 3i'],
            ['50 + i']
        ]
    })

    const B = bb.tensor({
        data: [
            ["2+2i", "7+9i", "3+5i", "5+8i", "3+4i", "5+6i", "7i", "5+9i", "6+0i", "1+6i", "7+9i", "5+7i", "1+9i", "6+6i", "8i", "6+8i", "1+4i", "1", "2+1i", "6+9i", "6i", "3+4i", "8+6i", "1", "2i", "3+7i", "7i", "9+6i", "3+5i", "2+4i", "1+7i", "7+8i", "6+2i", "6+8i", "4+7i", "9+1i", "8+6i", "5+2i", "1+2i", "5+2i", "8+7i", "7+0i"],
            ["6+4i", "8+0i", "4+0i", "8+7i", "2+0i", "9+8i", "8+7i", "3+7i", "8+6i", "5+0i", "2+1i", "7+5i", "8+6i", "7+4i", "7+7i", "4+8i", "6+6i", "3i", "6+1i", "2+6i", "1+6i", "2+8i", "1+9i", "1+3i", "2+2i", "1+6i", "6+0i", "6+6i", "2i", "8+7i", "8+9i", "4+6i", "7+4i", "3+2i", "7+1i", "7+4i", "7+6i", "5+3i", "4+5i", "9+1i", "5+2i", "3+0i"],
        ],
    })

    const C = bb.tensor({
        data: [["i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i", "i"]],

    })

    const D = bb.tensor({
        data: [
            ['0', '1', '2', '3', '4'],
            ['0', '1', '2', '3', '4'],
            ['0', '1', '2', '3', '4'],
            ['0', '1', '2', '3', '4'],
            ['0', '1', '2', '3', '4'],
        ],

    })


    const E = bb.tensor({ data:['1 + 8i'], })
    const F = bb.tensor({ data:[['0'], ['1'], ['2'], ['3'], ['4']], })

    const G = bb.tensor({
        data: [
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"],
            ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"]
        ],
    })

    const H = bb.tensor({
        data: [["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"]],


    })

    const I = bb.tensor({ data:[['1 + 1i', '4 + 6i', '2 - 5i']], })
    const J = bb.tensor({ data:[['7 - 1i', '2 + 1i', '5 - 9i']], })

    const K = bb.tensor({
        data: [
            ['5. + 3i', '4. + 2i', '4. + 8i', '9. + 7i'],
            ['4. + 7i', '9. + 2i', '4. + 4i', '4. + 8i'],
            ['3. + 1i', '4. + 3i', '5. + 1i', '7. + 7i'],
            ['4. + 5i', '7. + 3i', '3. + 5i', '7. + 3i']
        ],

    })

    const L = bb.tensor({
        data: [['6 + 1i', '4 + 0i', '4 + 4i', '3 + 1i'], ['1 + 5i', '0 + 1i', '2 + 4i', '3 + 9i'], ['7 + 8i', '5 + 4i', '3 + 6i', '7 + 9i'], ['7 + 1i', '2 + 3i', '9 + 2i', '2 + 2i']],

    })

    const M = new bb.assignment({
        of: bb.zeros({ shape: [100, 100], type: bb.ComplexFloat32 }),
        with: bb.tensor({ data:['1 + 1i'], type: bb.ComplexFloat32 })
    }).invoke()

    const N = bb.tensor({
        data: [['1. + 0i', '2. + 0i', '4. + 1i', '2. + 3i'], ['4. + 3i', '4. + 3i', '0. + 2i', '4. + 1i'], ['0. + 4i', '1. + 0i', '0. + 1i', '1. + 4i'], ['0. + 1i', '1. + 4i', '0. + 2i', '2. + 0i']],

    })

    const O = bb.tensor({ data:[['1. + 3i', '0. + 4i'], ['2. + 1i', '3. + 3i']], })
    const P = bb.tensor({
        data: [["0.+4i", "0.+4i", "2.+2i", "0.+1i", "3.+4i"], ["1.+2i", "1.+3i", "4.+0i", "2.+4i", "0.+3i"], ["3.+3i", "4.+1i", "3.+0i", "3.+3i", "0.+1i"], ["0.+3i", "3.+3i", "0.+1i", "1.+4i", "2.+1i"], ["2.+2i", "4.+4i", "3.+3i", "3.+4i", "1.+1i"]],

    })




    this.expect(new bb.min({ of: A }).invoke()).toEqual('10+2i')
    this.expect(new bb.max({ of: A }).invoke()).toEqual('50+1i')
    this.expect(new bb.mean({ of: A }).invoke()).toEqual('33.33333206176758+2i')
    this.expect(new bb.sum({ of: A }).invoke()).toEqual('100+6i')
    this.expect(new bb.norm({ of: A }).invoke()).toEqual('64.91532897949219')
    this.expect(new bb.min({ of: B }).invoke()).toEqual('7i')
    this.expect(new bb.max({ of: B }).invoke()).toEqual('9+6i')
    this.expect(new bb.mean({ of: B }).invoke()).toEqual('4.464285850524902+4.690476417541504i')
    this.expect(new bb.sum({ of: B }).invoke()).toEqual('375+394i')
    this.expect(new bb.norm({ of: B }).invoke()).toEqual('69.73521423339844')
    this.expect(new bb.addition({ of: B, with: B }).invoke()).toEqual(new bb.multiplication({ of: B, with: bb.tensor({ data:[2], type: bb.ComplexFloat32 }) }).invoke())
    this.expect(new bb.subtraction({ of: B, with: B }).invoke()).toEqual(new bb.multiplication({ of: B, with: bb.tensor({ data:[0], type: bb.ComplexFloat32 }) }).invoke())
    this.expect(new bb.division({ of: B, with: B }).invoke()).toEqual([["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"], ["1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"]])
    this.expect(new bb.subtraction({ of: B, with: C }).invoke()).toEqual(new bb.subtraction({ of: B, with: '0 + 1i' }).invoke())
    this.expect(new bb.multiplication({ of: A, with: E }).invoke()).toEqual([["-6+82i"], ["16+323i"], ["42+401i"]])
    this.expect(new bb.addition({ of: A, with: E }).invoke()).toEqual([["11+10i"], ["41+11i"], ["51+9i"]])
    this.expect(new bb.addition({ of: D, with: F.T() }).invoke()).toEqual([['0', '2', '4', '6', '8'], ['0', '2', '4', '6', '8'], ['0', '2', '4', '6', '8'], ['0', '2', '4', '6', '8'], ['0', '2', '4', '6', '8']])
    this.expect(new bb.addition({ of: D, with: F }).invoke()).toEqual([['0', '1', '2', '3', '4'], ['1', '2', '3', '4', '5'], ['2', '3', '4', '5', '6'], ['3', '4', '5', '6', '7'], ['4', '5', '6', '7', '8']])
    this.expect(new bb.addition({ of: G, with: H }).invoke()).toEqual([["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"], ["0", "2", "4", "6", "8", "10", "12", "14", "16", "18", "20", "22", "24", "26", "28", "30", "32", "34", "36", "38"]])
    this.expect(new bb.addition({ of: G, with: H.T() }).invoke()).toEqual([["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19"], ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20"], ["2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21"], ["3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22"], ["4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23"], ["5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24"], ["6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25"], ["7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26"], ["8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27"], ["9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28"], ["10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29"], ["11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30"], ["12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"], ["13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32"], ["14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33"], ["15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34"], ["16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35"], ["17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36"], ["18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37"], ["19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38"]])
    this.expect(new bb.cross({ of: I.T(), with: J.T() }).invoke()).toEqual([["65+2i"], ["-5-33i"], ["-33-35i"]])
    this.expect(new bb.matMult({ of: K, with: L }).invoke()).toEqual([["41+191i", "3+113i", "39+181i", "-34+180i"], ["32+213i", "2+101i", "6+200i", "-2+200i"], ["75+135i", "23+68i", "62+148i", "19+131i"], ["38+159i", "13+91i", "34+144i", "-15+173i"]])
    this.expect(new bb.matMult({ of: M, with: M }).invoke()).toEqual(new bb.assignment({ of: bb.ones({ shape: [100, 100], type: bb.ComplexFloat32 }), with: '200i' }).invoke())
    this.expect(new bb.inverse({ of: O }).invoke()).toEqual([["0.30000001192092896-0.8999999761581421i", "-0.800000011920929+0.4000000059604645i"], ["0.5i", "0.5-0.5i"]])

    console.log('\n\n-------- End Complex Suite --------\n\n')
})
